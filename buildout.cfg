# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi
# ... just reach by the recipe name
[buildout]
extensions = buildout.dumppickedversions
             mr.developer
dump-picked-versions-file = versions-picked.cfg

allow-picked-versions = true
parts =
    psycopg2
    omelette
    instance
    test
    zopepy

extends =
    http://dist.plone.org/release/4.1/versions.cfg
    versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.1
    http://dist.plone.org/thirdparty
    http://packages.communesplone.be/simple

sources = sources
sources-dir = devel
auto-checkout = collective.referencedatagridfield
                plone.app.referenceintegrity
                Products.urbanskin
                Products.DataGridField

# Reference any folders where you have Python egg source code under development here
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a
# repository mr.developer will handle this automatically for you
develop = .

[sources]
appy = bzr lp:~communesplone/appy/communesplone
Products.urbanskin = svn http://svn.communesplone.org/svn/communesplone/Products.urbanskin/trunk/
archetypes.referencebrowserwidget = svn https://svn.plone.org/svn/archetypes/MoreFieldsAndWidgets/archetypes.referencebrowserwidget/branches/livesearch
collective.referencedatagridfield = svn https://svn.plone.org/svn/collective/collective.referencedatagridfield/branches/more-columns
plone.app.referenceintegrity = svn https://svn.plone.org/svn/plone/plone.app.referenceintegrity/trunk
Products.DataGridField = svn http://svn.plone.org/svn/archetypes/Products.DataGridField/branches/cp-multiselectcolumn
Products.CMFPlone = svn https://svn.plone.org/svn/plone/Products.CMFPlone/branches/4.1/
Products.DataGridField = svn http://svn.plone.org/svn/archetypes/Products.DataGridField/branches/cp-multiselectcolumn

# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8084
debug-mode = off
verbose-security = on
blob-storage = var/blobstorage
environment-vars =
    zope_i18n_compile_mo_files true

eggs =
    Products.Clouseau
    Products.urban
    Products.urbanskin
    archetypes.schematuning
    ipdb
    iw.debug
    plone.reload

# Some pre-Plone 3.3 packages may need you to register the package name here in
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =
    Products.urban
    iw.debug

products =

# zopepy commands allows you to execute Python scripts using a PYTHONPATH
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    Products.urban [test]
    plone.app.referenceintegrity
    Products.DataGridField
environment = testenv

[testenv]
zope_i18n_compile_mo_files = true

# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    ${instance:eggs}

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs =
    ${test:eggs}
    ${instance:eggs}
#products = ${instance:products}
#packages = ${zope2:location}/lib/python ./
# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part

[psycopg2]
recipe = zc.recipe.egg:custom
egg = psycopg2
find-links = http://eggs.affinitic.be/psycopg2-2.0.6.tar.gz
define = PSYCOPG_EXTENSIONS,PSYCOPG_DISPLAY_SIZE,PSYCOPG_NEW_BOOLEAN,HAVE_PQFREEMEM,HAVE_PQPROTOCOL3
include-dirs = /usr/include
library-dirs = /usr/lib
rpath = /usr/lib
