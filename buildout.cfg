# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi
# ... just reach by the recipe name
[buildout]
extensions = mr.developer

dump-picked-versions-file = versions-picked.cfg

allow-picked-versions = true
parts =
    psycopg2
    omelette
    instance
    svnproducts
    test
    coverage
    report
    zopepy
    sphinx

extends =
    http://dist.plone.org/release/4.2.5/versions.cfg
    versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
allow-hosts =
    *.python.org
    *.plone.org
    *.zope.org
    *labix.org

find-links =
    http://dist.plone.org/release/4.2.5
    http://dist.plone.org/thirdparty
    http://packages.communesplone.be/simple

sources = sources
sources-dir = devel
auto-checkout = appy
                plone.app.referenceintegrity
                plone.app.linkintegrity
                imio.urban.dataimport
                imio.pm.wsclient
                imio.pm.locales
                imio.actionspanel
                plonetheme.imioapps

# Reference any folders where you have Python egg source code under development here
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a
# repository mr.developer will handle this automatically for you
develop = .


[sphinx]
recipe = collective.recipe.sphinxbuilder
outputs = html
source = ${buildout:directory}/docs
build = ${buildout:directory}/docs/html
eggs =
  Sphinx
  Docutils
  roman
  Pygments
  collective.sphinx.autoatschema


[sources]
appy = bzr http://bazaar.launchpad.net/~communesplone/appy/communesplone/
plone.app.referenceintegrity = svn https://svn.plone.org/svn/plone/plone.app.referenceintegrity/trunk
plone.app.linkintegrity = svn https://svn.plone.org/svn/plone/plone.app.linkintegrity/trunk
Products.CMFPlone = svn https://svn.plone.org/svn/plone/Products.CMFPlone/branches/4.1/
imio.urban.dataimport = svn http://svn.communesplone.org/svn/communesplone/imio.urban.dataimport/trunk
imio.pm.wsclient = svn http://svn.communesplone.org/svn/communesplone/imio.pm.wsclient/trunk/
imio.pm.locales = svn http://svn.communesplone.org/svn/communesplone/imio.pm.locales/trunk/
imio.actionspanel = svn http://svn.communesplone.org/svn/communesplone/imio.actionspanel/trunk/
plonetheme.imioapps = svn http://svn.communesplone.org/svn/communesplone/plonetheme.imioapps/trunk/


# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8081
debug-mode = off
verbose-security = on
blob-storage = var/blobstorage
environment-vars =
    zope_i18n_compile_mo_files true

eggs =
    Products.Clouseau
    Products.urban
    archetypes.schematuning
    collective.ckeditor
    ipdb
    iw.debug
    plone.reload
    Products.ContentTypeValidator
    imio.urban.dataimport
    imio.pm.wsclient
    imio.pm.locales
    imio.actionspanel
    plonetheme.imioapps

# Some pre-Plone 3.3 packages may need you to register the package name here in
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =
    Products.urban
    collective.ckeditor
    iw.debug
    imio.urban.dataimport
    imio.pm.wsclient
    imio.pm.locales
    imio.actionspanel
    plonetheme.imioapps

products =
    ${svnproducts:location}

[svnproducts]
recipe = infrae.subversion
urls =
    http://svn.communesplone.org/svn/communesplone/CPUtils/trunk CPUtils

# zopepy commands allows you to execute Python scripts using a PYTHONPATH
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    Products.urban [test]
    Products.ContentTypeValidator
    ipdb
environment = testenv

[testenv]
zope_i18n_compile_mo_files = true

[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    include = '--source=${buildout:directory}/src/Products/urban'
    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--all', '-s', 'Products.urban']

[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    sys.argv = sys.argv[:] + ['html', '-i']

# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    ${instance:eggs}

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs =
    ${test:eggs}
    ${instance:eggs}
products = ${instance:products}
#packages = ${zope2:location}/lib/python ./
# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part

[psycopg2]
recipe = zc.recipe.egg:custom
egg = psycopg2
find-links = http://eggs.affinitic.be/psycopg2-2.0.6.tar.gz
define = PSYCOPG_EXTENSIONS,PSYCOPG_DISPLAY_SIZE,PSYCOPG_NEW_BOOLEAN,HAVE_PQFREEMEM,HAVE_PQPROTOCOL3
include-dirs = /usr/include
library-dirs = /usr/lib
rpath = /usr/lib

[templates]
recipe = zc.recipe.egg:scripts
eggs = Products.urban [templates]
