<div metal:define-macro="urbanFolderManagerMacro" i18n:domain="urban" tal:define="folderManagers here/getFoldermanagers">
 <tal:loop repeat="folderManager folderManagers" tal:condition="folderManagers">
   <span tal:content="folderManager/Title">Treating agent name</span><br />
 </tal:loop>
 <span tal:condition="not: folderManagers" class="discreet" i18n:translate="content_none">None</span>
</div>


<div metal:define-macro="urbanArchitectsMacro" i18n:domain="urban" tal:define="architects here/getArchitects">
<tal:loop repeat="architect architects" tal:condition="architects">
<div class="#" tal:define="oddrow repeat/architect/odd;" tal:attributes="class python: oddrow and 'even' or 'odd'">
  <a href="#" tal:attributes="href python: architect.absolute_url() + '?came_from_licence_uid=' + context.UID()">
   <span tal:replace="python: architect.getPersonTitle(short=True)" />
   <span tal:replace="architect/getName1|nothing" />
   <span tal:replace="architect/getName2|nothing" />
   <span tal:condition="architect/getSociety" tal:replace="python: '(' + architect.getSociety() + ')'" />
  </a>
 <br />
 <span tal:content="python: architect.getStreet()+' '+architect.getNumber()" /><br />
 <span tal:content="python: architect.getZipcode()+' '+architect.getCity()" /><br />
</div>
</tal:loop>
</div>


<div metal:define-macro="urbanGeometriciansMacro" i18n:domain="urban" tal:define="geometricians here/getGeometricians">
<tal:loop repeat="geometrician geometricians" tal:condition="geometricians">
<div class="#" tal:define="oddrow repeat/geometrician/odd;" tal:attributes="class python: oddrow and 'even' or 'odd'">
  <a href="#" tal:attributes="href python: geometrician.absolute_url() + '?came_from_licence_uid=' + context.UID()">
   <span tal:replace="python: geometrician.getPersonTitle(short=True)" />
   <span tal:replace="geometrician/getName1|nothing" />
   <span tal:replace="geometrician/getName2|nothing" />
   <span tal:condition="geometrician/getSociety" tal:replace="python: '(' + geometrician.getSociety() + ')'" />
  </a>
 <span tal:content="python: geometrician.getStreet()+' '+geometrician.getNumber()" /><br />
 <span tal:content="python: geometrician.getZipcode()+' '+geometrician.getCity()" /><br />
</div>
</tal:loop>
</div>


<div metal:define-macro="urbanNotariesMacro" i18n:domain="urban" tal:define="notaries here/getNotaryContact">
<tal:loop repeat="notary notaries">
<div class="#" tal:define="oddrow repeat/notary/odd;" tal:attributes="class python: oddrow and 'even' or 'odd'">
  <a href="#" tal:attributes="href python: notary.absolute_url() + '?came_from_licence_uid=' + context.UID()">
     <span tal:replace="python: notary.getPersonTitle(short=True)" />
     <span tal:replace="notary/getName1|nothing" />
     <span tal:replace="notary/getName2|nothing" />
     <span tal:condition="notary/getSociety" tal:replace="notary/getSociety|nothing" />
  </a>
 <br />
 <span tal:content="python: notary.getStreet()+' '+notary.getNumber()" /><br />
 <span tal:content="python: notary.getZipcode()+' '+notary.getCity()" /><br />
</div>
</tal:loop>
</div>


<metal:applicants define-macro="urbanApplicantsMacro" i18n:domain="urban">
 <div class="#" tal:define="applicants context/getApplicants"
                tal:attributes="class python: applicants and 'field' or 'field warning'">
  <p tal:condition="not: applicants" i18n:translate="warning_add_an_applicant">
   You must encode applicant(s)
  </p>
  <div>
   <tal:listing content="structure view/renderContactListing" />
  </div>
  <form tal:define="ctype python: context.portal_types.getTypeInfo('Applicant');
                    member context/@@plone_portal_state/member;"
        tal:condition="python: member.has_permission('urban: Add Contact', context)"
        tal:attributes="action python: context.absolute_url() + '/createObject'"
        i18n:domain="urban" name="quickAdd"  action="createObject" method="post">
  <input type="hidden" name="type_name" value="#" tal:attributes="value ctype/id" />
  <input type="submit" class="urbanButton contenttype-applicant button-applicant" id="add-applicant" value="add_an_applicant" i18n:attributes="value" />
  </form>
 </div>
</metal:applicants>


<metal:proprietaries define-macro="urbanProprietariesMacro" i18n:domain="urban">
 <div class="#" tal:define="proprietaries context/getProprietaries"
                tal:attributes="class python: proprietaries and 'field' or 'field warning'">
  <p tal:condition="not: proprietaries" i18n:translate="warning_add_a_proprietary">
   You must encode proprietary(ies)
  </p>
  <div>
   <tal:listing content="structure view/renderContactListing" />
  </div>
  <form tal:define="ctype python: context.portal_types.getTypeInfo('Proprietary');
                    member context/@@plone_portal_state/member;"
        tal:condition="python: member.has_permission('urban: Add Contact', context)"
        tal:attributes="action python: context.absolute_url() + '/createObject'"
        i18n:domain="urban" name="quickAdd"  action="createObject" method="post">
  <input type="hidden" name="type_name" value="#" tal:attributes="value ctype/id" />
  <input type="submit" class="urbanButton contenttype-proprietary button-proprietary" id="add-proprietary" value="add_a_proprietary" i18n:attributes="value" />
  </form>
 </div>
</metal:proprietaries>


<metal:editLicenceMacro define-macro="editLicenceMacro" i18n:domain="urban" tal:define="useTabbing python: context.portal_urban.getUrbanConfig(context).getUseTabbingForEdit();">
   <div tal:condition="not: useTabbing">
       <metal:listing use-macro="here/@@licencemacros/editLicenceFieldsNoTabbingMacro" />
   </div>

   <tal:with_tabbing condition="useTabbing">
       <metal:listing use-macro="here/@@licencemacros/editLicenceFieldsWithTabbingMacro" />
   </tal:with_tabbing>
</metal:editLicenceMacro>


<metal:editLicenceFieldsWithTabbingMacro define-macro="editLicenceFieldsWithTabbingMacro"
                                         i18n:domain="urban"
                                         tal:define="putils context/plone_utils;
                                                     tabs_config context/getTabs">
<tal:fieldsets repeat="tab_config tabs_config">
 <tal:tab define="fieldset python: 'urban_%s' % tab_config['value'];
                  display_name python: tab_config['display_name']">
  <fieldset class="urbanEditWithTabbing" tal:define="fieldsetid python:putils.normalizeString(fieldset)"
          tal:attributes="id string:fieldset-${fieldsetid}">
    <legend id="#"
            tal:content="display_name"
            tal:attributes="id string:fieldsetlegend-${fieldsetid}"
            i18n:translate="" />
      <metal:listing use-macro="here/@@licencemacros/editLicenceFieldsMacro" />
  </fieldset>
 </tal:tab>
</tal:fieldsets>
</metal:editLicenceFieldsWithTabbingMacro>


<div metal:define-macro="editLicenceFieldsMacro" i18n:domain="urban">
 <tal:fields repeat="field python:schematas[fieldset].editableFields(here, visible_only=True)">
  <tal:block define="fieldName field/getName">

   <tal:comment replace="nothing">Display a fieldset around the 'isInPca' and 'Pca' fields</tal:comment>
   <tal:pca condition="python: fieldName in ['isInPCA', 'pca',]">
    <tal:comment replace="nothing">We do the entire job manually when the field is 'isInPca' and there is nothing left to do when it is the 'Pca' field</tal:comment>
    <tal:manage_pca condition="python: fieldName == 'isInPCA'">
     <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
      <legend i18n:translate="pca_fieldset_legend">PCA</legend>
      <metal:fieldMacro use-macro="python:here.widget('isInPCA', mode='edit')" />
      <metal:fieldMacro use-macro="python:here.widget('pca', mode='edit')" />
     </fieldset>
    </tal:manage_pca>
   </tal:pca>

   <tal:comment replace="nothing">Display a fieldset around the 'isInSubdivision' and 'subdivisionDetails' fields</tal:comment>
   <tal:subdivision condition="python: fieldName in ['isInSubdivision', 'parcellings', 'subdivisionDetails',]">
    <tal:comment replace="nothing">We do the entire job manually when the field is 'isInSubdivision' and there is nothing left to do when it is the 'subdivisionDetails' field</tal:comment>
    <tal:manage_subdivision condition="python: fieldName == 'isInSubdivision'">
     <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
      <legend i18n:translate="subdivision_fieldset_legend">Subdivision</legend>
      <metal:fieldMacro use-macro="python:here.widget('isInSubdivision', mode='edit')" />
      <metal:fieldMacro use-macro="python:here.widget('parcellings', mode='edit')" />
      <metal:fieldMacro use-macro="python:here.widget('subdivisionDetails', mode='edit')" />
     </fieldset>
    </tal:manage_subdivision>
    </tal:subdivision>

   <tal:other condition="not: python: fieldName in ['isInPCA', 'pca', 'isInSubdivision', 'parcellings', 'subdivisionDetails',]">
    <metal:fieldMacro use-macro="python:here.widget(field.getName(), mode='edit')" />
   </tal:other>
 </tal:block>
 </tal:fields>
</div>


<div metal:define-macro="editLicenceFieldsNoTabbingMacro"
     tal:define="putils context/plone_utils;
                 tabs_config context/getTabs">
<tal:fieldsets repeat="tab_config tabs_config">
 <tal:tab define="fieldset python: 'urban_%s' % tab_config['value'];
                  display_name python: tab_config['display_name']">
  <fieldset tal:define="fieldsetid python:putils.normalizeString(fieldset)">
    <legend tal:content="display_name"
            tal:attributes="id string:fieldsetlegend-${fieldsetid}"
            i18n:translate="" />
      <metal:listing use-macro="here/@@licencemacros/editLicenceFieldsMacro" />
  </fieldset>
 </tal:tab>
</tal:fieldsets>
</div>



