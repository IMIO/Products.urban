OpenLayers.ProxyHost="<tal:block content="python: tool.absolute_url() + '/portal_urban/WfsProxy?url='"></tal:block>";
format = 'image/png';

/* avoid mutliple init */
var already_init = document.getElementById('map_initialized')

if (already_init.value == '0') {
already_init.value = '1';

var bounds = new OpenLayers.Bounds(<tal:block replace="tool/getMapExtent"></tal:block>);
var options = {controls: [],
                    maxExtent: bounds,
                    maxResolution: 42.71197656250001,
                    projection: "EPSG:31370",
                    units: 'm'
                };
                map = new OpenLayers.Map('map', options);

                // setup single tiled layer
                parcels = new OpenLayers.Layer.WMS.Untiled(
                    "Parcellaire", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:capa',
                        styles: '',
                        srs: 'EPSG:31370',
                        format: format
                    },
                    {singleTile: true, ratio: 1} 
                );

                parcelslimits = new OpenLayers.Layer.WMS.Untiled(
                    "Contours parcelles", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:capa',
                        styles: 'ContoursParcelles',
                        srs: 'EPSG:31370',
                        format: format,
                        transparent: true
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': false} 
                );


                selection = new OpenLayers.Layer.WMS.Untiled(
                    "selection", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:capa',
                        styles: 'Selection',
                        srs: 'EPSG:31370',
                        format: format,
                        transparent: true,
                        cql_filter: "(<tal:block replace="cqlquery"></tal:block>)"
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': false} 
                );

                <tal:block condition="cqlquery2">
                selection2 = new OpenLayers.Layer.WMS.Untiled(
                    "selection2", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:capa',
                        styles: 'Selection2',
                        srs: 'EPSG:31370',
                        format: format,
                        transparent: true,
                        cql_filter: "(<tal:block replace="cqlquery2"></tal:block>)"
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': false} 
                );
                </tal:block>

                streets = new OpenLayers.Layer.WMS.Untiled(
                    "noms de rue", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:toli',
                        styles: '',
                        srs: 'EPSG:31370',
                        format: format,
                        transparent: true
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': false} 
                );

               
                
                parcelsnum = new OpenLayers.Layer.WMS.Untiled(
                    "n* de parcelle", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:canu',
                        styles: 'ParcelsNum',
                        srs: 'EPSG:31370',
                        format: format,
                        transparent: true
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': false, visibility: false} 
                );
                
                builds = new OpenLayers.Layer.WMS.Untiled(
                    "constructions", "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wms",
                    {
                        height: '446',
                        width: '512',
                        layers: 'urban<tal:block replace="tool/getNISNum" />:cabu',
                        styles: '',
                        srs: 'EPSG:31370',
                        format: format,
                        transparent: true
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': false} 
                );
                
                
                
                map.addLayers([selection])
                <tal:block condition="cqlquery2">
                map.addLayers([selection2])
                </tal:block>
                map.addLayers([streets,parcelsnum,parcelslimits,parcels]);
                
                <tal:block repeat="layerobj python:tool.additional_layers.objectValues()">
                    <tal:block replace="python:str(layerobj.getId()).replace('-','')"/> = new OpenLayers.Layer.WMS.Untiled("<tal:block replace='python:layerobj.Title()'/>",
                    "<tal:block condition="python:layerobj.getWMSUrl()==''" replace="python: 'http://'+tool.getWebServerHost()+'/geoserver/wms'"/><tal:block condition="python:layerobj.getWMSUrl()!=''" replace="python: layerobj.getWMSUrl()"/>",
                    {
                        height: '446',
                        width: '512',
                        layers: '<tal:block replace='python:layerobj.getLayers()'/>',
                        styles: '<tal:block replace='python:layerobj.getStyles()'/>',
                        srs: '<tal:block replace='python:layerobj.getSRS()'/>',
                        format: 'image/png',
                        transparent: <tal:block replace='python:str(layerobj.getTransparent()).lower()'/>
                    },
                    {singleTile: true, ratio: 1,'isBaseLayer': <tal:block replace='python:str(layerobj.getBaseLayer()).lower()'/>, visibility: <tal:block replace='python:str(layerobj.getVisibility()).lower()'/>} 
                );
                
                map.addLayers([<tal:block replace="python:str(layerobj.getId()).replace('-','')"/>])
                
                </tal:block>
                

        var measureDistanceControl = new OpenLayers.Control.Measure(
                    OpenLayers.Handler.Path, {
                        persist: true,
                        handlerOptions: {
                            layerOptions: {styleMap: styleMap}
                        },
            displayClass:'olControlMeasureDistance'
                    }
            );
        measureDistanceControl.events.on({
                 "measure": ShowMeasure
            });

        var measureAreaControl = new OpenLayers.Control.Measure(
                    OpenLayers.Handler.Polygon, {
                        persist: true,
                        handlerOptions: {
                            layerOptions: {styleMap: styleMap}
                        },
            displayClass:'olControlMeasureArea'
                    }
            );
        measureAreaControl.events.on({
                 "measure": ShowMeasure
            });

            var select = new OpenLayers.Layer.Vector("SelectionVector", {styleMap: 
                new OpenLayers.Style(OpenLayers.Feature.Vector.style["select"])
            });

        map.addLayers([select]);

        
        if('<tal:block replace="parcelBufferGeom"></tal:block>' != '')
        {
        var bufferLayer = new OpenLayers.Layer.Vector("Buffer", {styleMap: 
                    new OpenLayers.Style(OpenLayers.Feature.Vector.style["select"])
                });
        var wktReader = new OpenLayers.Format.WKT();
        bufferLayer.addFeatures(wktReader.read("<tal:block replace="parcelBufferGeom"></tal:block>"));
        map.addLayers([bufferLayer]);
        }
    
            
            
            var selectControl = new OpenLayers.Control.GetFeature({
        protocol: new OpenLayers.Protocol.WFS({
            url: "http://<tal:block replace='tool/getWebServerHost' />/geoserver/wfs",
            featureType: "capa",
            srsName: 'EPSG:31370',
            featureNS: '<tal:block replace="python:'http://www.urban%s.com'%tool.getNISNum()"></tal:block>'
        }),
                box: true,
                hover: false,
                multipleKey: "shiftKey",
                toggleKey: "ctrlKey"
            });

        selectControl.handlers.keyboard = new OpenLayers.Handler.Keyboard(this,
                {
             keydown: function(evt) {
               if(evt.keyCode == 13) // enter key
               {
                buildMapParcelleUrl(select);
               }
             }
        }
        );

            selectControl.events.register("featureselected", this, function(e) {
                select.addFeatures([e.feature]);
            });
            selectControl.events.register("featureunselected", this, function(e) {
        console.log("remove feature");
                select.removeFeatures([e.feature]);
            });
                    
        var printButton = new OpenLayers.Control.Button({
         displayClass: "olControlPrint", 
                 trigger: function() { 
              var mapview = map;
              var layers  = map.layers;
              var extent  = mapview.getExtent();
                  extent  = [extent.left,extent.bottom,extent.right,extent.top].join(',');
              var width   = mapview.getSize().w;
              var height  = mapview.getSize().h;
              // build a comma-joined list of layers
              var activelayers = [];
              for (i in layers) {
                  if (layers[i].CLASS_NAME == "OpenLayers.Layer.Vector") continue;
                  if (!layers[i].getVisibility) continue;   
                  if (!layers[i].getVisibility()) continue;
                  if (!layers[i].calculateInRange()) continue;
                  activelayers[activelayers.length] = layers[i].params['LAYERS'];
              }
              activelayers = activelayers.join(',');
            var baseUrl = "<tal:block replace="python: tool.absolute_url() + '/portal_urban/printmap'"></tal:block>";

            var printMapUrl = baseUrl + "?layers=" + activelayers+ "&"+"extent="+extent+ "&"+"cql=";
            //var printMapUrl = baseUrl + "?extent="+encodeURIComponent(extent)+"&layers=" + encodeURIComponent(activelayers);
            //var printMapUrl = baseUrl + "?extent="+extent;
            printMapUrl += "<tal:block replace="cqlquery2"></tal:block>";
            printMapUrl += "<tal:block replace="cqlquery"></tal:block>";
            
            console.log(printMapUrl)

              window.open(printMapUrl);
         }
        });

            var panel = new OpenLayers.Control.Panel();
            
            panel.addControls([
            new OpenLayers.Control.Navigation({'zoomWheelEnabled' : false})
            ,measureDistanceControl
            ,measureAreaControl
            ,selectControl
            ,printButton
            ]);
            map.addControl(panel);
            

            

                // build up all controls
                    
                map.addControl(new OpenLayers.Control.PanZoomBar({
                    position: new OpenLayers.Pixel(2, 100)
                }));
                map.addControl( new OpenLayers.Control.LayerSwitcher() );
                map.addControl(new OpenLayers.Control.Navigation());
                map.addControl(new OpenLayers.Control.Scale($('scale')));
                map.addControl(new OpenLayers.Control.MousePosition({element: $('location')}));

                controls = map.getControlsByClass('OpenLayers.Control.Navigation');
                controls[0].disableZoomWheel();
                controls[1].disableZoomWheel();
                    
                map.zoomToExtent( new OpenLayers.Bounds(<tal:block replace="zoneExtent"></tal:block>));
}
