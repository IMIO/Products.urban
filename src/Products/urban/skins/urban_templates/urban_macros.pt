<div metal:define-macro="goBackToMacro" i18n:domain="urban">
<br />
<a class="no_underline" href="#"
   tal:define="tool python: context.portal_urban"
   tal:attributes="href python: context.portal_type in tool.getUrbanTypes() and context.absolute_url() or '%s#fieldsetlegend-urban_events' % context.aq_inner.aq_parent.absolute_url()"><img src="goback.png" />&nbsp;<span i18n:translate="go_back">Go back</span></a>
</div>

<div metal:define-macro="urbanFolderManagerMacro" i18n:domain="urban" tal:define="folderManagers here/getFoldermanagers">
 <tal:loop repeat="folderManager folderManagers" tal:condition="folderManagers">
   <span tal:content="folderManager/Title">Treating agent name</span><br />
 </tal:loop>
 <span tal:condition="not: folderManagers" class="discreet" i18n:translate="content_none">None</span>
</div>

<div metal:define-macro="urbanArchitectsMacro" i18n:domain="urban" tal:define="architects here/getArchitects">
<tal:loop repeat="architect architects" tal:condition="architects">
<div class="#" tal:define="oddrow repeat/architect/odd;" tal:attributes="class python: oddrow and 'even' or 'odd'">
  <a href="#" tal:attributes="href python: architect.absolute_url() + '?came_from_licence_uid=' + context.UID()">
   <span tal:replace="python: architect.getPersonTitle(short=True)" />
   <span tal:replace="architect/getName1|nothing" />
   <span tal:replace="architect/getName2|nothing" />
   <span tal:condition="architect/getSociety" tal:replace="python: '(' + architect.getSociety() + ')'" />
  </a>
 <br />
 <span tal:content="python: architect.getStreet()+' '+architect.getNumber()" /><br />
 <span tal:content="python: architect.getZipcode()+' '+architect.getCity()" /><br />
</div>
</tal:loop>
</div>

<div metal:define-macro="urbanGeometriciansMacro" i18n:domain="urban" tal:define="geometricians here/getGeometricians">
<tal:loop repeat="geometrician geometricians" tal:condition="geometricians">
<div class="#" tal:define="oddrow repeat/geometrician/odd;" tal:attributes="class python: oddrow and 'even' or 'odd'">
  <a href="#" tal:attributes="href python: geometrician.absolute_url() + '?came_from_licence_uid=' + context.UID()">
   <span tal:replace="python: geometrician.getPersonTitle(short=True)" />
   <span tal:replace="geometrician/getName1|nothing" />
   <span tal:replace="geometrician/getName2|nothing" />
   <span tal:condition="geometrician/getSociety" tal:replace="python: '(' + geometrician.getSociety() + ')'" />
  </a>
 <span tal:content="python: geometrician.getStreet()+' '+geometrician.getNumber()" /><br />
 <span tal:content="python: geometrician.getZipcode()+' '+geometrician.getCity()" /><br />
</div>
</tal:loop>
</div>

<div metal:define-macro="urbanNotariesMacro" i18n:domain="urban" tal:define="notaries here/getNotaryContact">
<tal:loop repeat="notary notaries">
<div class="#" tal:define="oddrow repeat/notary/odd;" tal:attributes="class python: oddrow and 'even' or 'odd'">
  <a href="#" tal:attributes="href python: notary.absolute_url() + '?came_from_licence_uid=' + context.UID()">
     <span tal:replace="python: notary.getPersonTitle(short=True)" />
     <span tal:replace="notary/getName1|nothing" />
     <span tal:replace="notary/getName2|nothing" />
     <span tal:condition="notary/getSociety" tal:replace="notary/getSociety|nothing" />
  </a>
 <br />
 <span tal:content="python: notary.getStreet()+' '+notary.getNumber()" /><br />
 <span tal:content="python: notary.getZipcode()+' '+notary.getCity()" /><br />
</div>
</tal:loop>
</div>

<metal:applicants define-macro="urbanApplicantsMacro" i18n:domain="urban">
 <div class="#" tal:define="applicants context/getApplicants"
                tal:attributes="class python: applicants and 'field' or 'field warning'">
  <p tal:condition="not: applicants" i18n:translate="warning_add_an_applicant">
   You must encode applicant(s)
  </p>
  <div>
   <tal:listing content="structure view/renderContactListing" />
  </div>
  <form tal:define="ctype python: context.portal_types.getTypeInfo('Applicant');
                    member context/@@plone_portal_state/member;"
        tal:condition="python: member.has_permission('urban: Add Contact', context)"
        tal:attributes="action python: context.absolute_url() + '/createObject'"
        i18n:domain="urban" name="quickAdd"  action="createObject" method="post">
  <input type="hidden" name="type_name" value="#" tal:attributes="value ctype/id" />
  <input type="submit" class="urbanButton contenttype-applicant button-applicant" id="add-applicant" value="add_an_applicant" i18n:attributes="value" />
  </form>
 </div>
</metal:applicants>

<metal:proprietaries define-macro="urbanProprietariesMacro" i18n:domain="urban">
 <div class="#" tal:define="proprietaries context/getProprietaries"
                tal:attributes="class python: proprietaries and 'field' or 'field warning'">
  <p tal:condition="not: proprietaries" i18n:translate="warning_add_a_proprietary">
   You must encode proprietary(ies)
  </p>
  <div>
   <tal:listing content="structure view/renderContactListing" />
  </div>
  <form tal:define="ctype python: context.portal_types.getTypeInfo('Proprietary');
                    member context/@@plone_portal_state/member;"
        tal:condition="python: member.has_permission('urban: Add Contact', context)"
        tal:attributes="action python: context.absolute_url() + '/createObject'"
        i18n:domain="urban" name="quickAdd"  action="createObject" method="post">
  <input type="hidden" name="type_name" value="#" tal:attributes="value ctype/id" />
  <input type="submit" class="urbanButton contenttype-proprietary button-proprietary" id="add-proprietary" value="add_a_proprietary" i18n:attributes="value" />
  </form>
 </div>
</metal:proprietaries>

<tal:comment replace="nothing">
Requires defined element "thisObject" as an object and
can receive a "actionsToHide" list of actions not to display</tal:comment>
<div metal:define-macro="urbanActionsMacro" i18n:domain="urban"
           tal:define="member context/@@plone_portal_state/member;
           actionsToHide actionsToHide|python:()">

  <!-- actions panel -->

  <div align="right" tal:define="wtool context/portal_workflow;
                     ext_editor context/portal_properties/site_properties/ext_editor">
      <!-- Available transitions -->
      <tal:wf_transitions condition="python: not 'transitions' in actionsToHide"
                          repeat="transition python: wtool.getTransitionsFor(thisObject)">
        <form style="display: inline;"
              tal:attributes="action python: thisObject.absolute_url() + '/content_status_modify'"
              tal:define="imageName python: transition['title'] + '.png'"
              i18n:domain="plone">
          <input type="hidden" name="workflow_action" tal:attributes="value python: transition['id']" />
          <input type="hidden" name="came_from"
                 tal:attributes="value python: context.REQUEST.get('ACTUAL_URL') + '?' + context.REQUEST.get('QUERY_STRING')" />
          <!-- Icon -->
          <input tal:condition="python: hasattr(thisObject, imageName)" type="image" tal:attributes="src string:${portal_url}/${imageName};
                                              title python: transition['id']"
                 i18n:attributes="title" />
          <!-- Button -->
          <input tal:condition="python: not hasattr(thisObject, imageName)"
                 type="submit" tal:attributes="value python: transition['id'];"
                 i18n:attributes="value"/>
        </form>
      </tal:wf_transitions>

      <!-- Edit action -->
      <tal:edit_action condition="python: member.has_permission('Modify portal content', thisObject)"
                       define="suffix python: test(needExternalEdition and ext_editor,  '/external_edit', '/edit')">
        <a class="noPadding" tal:attributes="href python: thisObject.absolute_url() + suffix">
          <img src="#" tal:attributes="src string:${portal_url}/edit.gif" title="label_edit" i18n:attributes="title" />
        </a>
      </tal:edit_action>

      <!-- Own management of the "delete" action -->
      <tal:delete_action condition="python: member.has_permission('Delete objects', thisObject)">

        <a class="urbanDelete noPadding"
           tal:attributes="href python: thisObject.absolute_url() + '/delete_confirmation'">
            <!-- Icon -->
            <img src="#" tal:attributes="src string:${portal_url}/delete_icon.gif" i18n:attributes="title" title="label_remove"
                 onClick="javascript:confirmDeleteObject(this)" style="cursor:pointer"/>
        </a>
      </tal:delete_action>
  </div>
</div>


<div metal:define-macro="urbanParcelsMacro" i18n:domain='urban'>
 <table tal:define="member context/@@plone_portal_state/member;" cellspacing=0 cellpadding=0 width=100%>
  <tr>
   <td>
    <div class="#" tal:define="parcels parcels|context/getParcels"
                   tal:attributes="class python: test(parcels, 'field', 'field warning')">
    <div tal:condition="not: parcels" i18n:translate="warning_add_a_parcel">You must encode concerned parcel(s)
    </div>
    <div>
     <tal:listing content="structure view/renderParcelsListing" />
    </div>
    <table>
     <tr><td>
     <form tal:condition="python: member.has_permission('urban: Add PortionOut', context)" name="quickAdd"
           tal:attributes="action python: context.absolute_url() + '/searchparcels'" action="searchparcels" method="post">
      <input type="submit" class="contenttype-portionout button-portionout" id="addPortionOut" value="search_parcels" i18n:attributes="value" />
     </form>
     </td><td width="2%"></td><td>
     <form tal:condition="python: member.has_permission('urban: Add PortionOut', context)" name="manualQuickAdd"
           tal:attributes="action python: context.absolute_url() + '/createObject?type_name=PortionOut'" action="searchparcels" method="post">
      <input type="submit" class="contenttype-portionout button-portionout" id="manualAddPortionOut" value="manual_parcel" i18n:attributes="value" />
     </form>
     </td></tr>
    </table>
   </div>
  </td>
 </tr>
 </table>
</div>

<metal:edit define-macro="editDefaultMacro"
               tal:define="member context/@@plone_portal_state/member;
                       border python: test(member.has_role('Manager'), 'enable_border', 'disable_border');
                       dummy python:request.set(border, 1);
                       putils context/plone_utils;">

      <tal:fieldsets repeat="fieldset python: ['default',]">
        <fieldset class="urbanEditWithTabbing" tal:define="fieldsetid python:putils.normalizeString(fieldset)"
                tal:attributes="id string:fieldset-${fieldsetid}">
          <legend id="#"
                  tal:content="python: view.getTranslatedSchemaLabel(fieldset)"
                  tal:attributes="id string:fieldsetlegend-${fieldsetid}"
                  i18n:translate="" />
          <tal:fields repeat="field python:schematas[fieldset].editableFields(here, visible_only=True)">
           <metal:fieldMacro use-macro="python:here.widget(field.getName(), mode='edit')" />
          </tal:fields>
        </fieldset>
      </tal:fieldsets>
</metal:edit>

<metal:edit define-macro="editUrbaneventtypeMacro"
               tal:define="member context/@@plone_portal_state/member;
                       border python: test(member.has_role('Manager'), 'enable_border', 'disable_border');
                       dummy python:request.set(border, 1);
                       putils context/plone_utils;">

      <tal:fieldsets repeat="fieldset python: ['default',]">
        <fieldset class="urbanEditWithTabbing" tal:define="fieldsetid python:putils.normalizeString(fieldset)"
                tal:attributes="id string:fieldset-${fieldsetid}">
          <legend id="#"
                  tal:content="python: view.getTranslatedSchemaLabel(fieldset)"
                  tal:attributes="id string:fieldsetlegend-${fieldsetid}"
                  i18n:translate="" />

        <tal:fields repeat="field python:schematas[fieldset].editableFields(here, visible_only=True)">

        <tal:keyevent condition="python: fieldName in ['isKeyEvent', 'keyDates',]"
                 define="fieldName field/getName">
           <tal:manage_keyevent condition="python: fieldName == 'isKeyEvent'">
             <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
              <legend i18n:translate="pca_fieldset_legend">Is key event</legend>
               <metal:fieldMacro use-macro="python:here.widget('isKeyEvent', mode='edit')" />
               <metal:fieldMacro use-macro="python:here.widget('keyDates', mode='edit')" />
             </fieldset>
           </tal:manage_keyevent>
         </tal:keyevent>

          <tal:default condition="python: fieldName not in ['isKeyEvent', 'keyDates',]"
                 define="fieldName field/getName">
           <metal:fieldMacro use-macro="python:here.widget(fieldName, mode='edit')" />
         </tal:default>
        </tal:fields>
        </fieldset>
      </tal:fieldsets>
</metal:edit>

<div metal:define-macro="editLicenceFieldsNoTabbingMacro"
     tal:define="putils context/plone_utils;
                 tabs_config context/getTabs">
<tal:fieldsets repeat="tab_config tabs_config">
 <tal:tab define="fieldset python: 'urban_%s' % tab_config['value'];
                  display_name python: tab_config['display_name']">
  <fieldset tal:define="fieldsetid python:putils.normalizeString(fieldset)">
    <legend tal:content="display_name"
            tal:attributes="id string:fieldsetlegend-${fieldsetid}"
            i18n:translate="" />
      <metal:listing use-macro="here/urban_macros/macros/editLicenceFieldsMacro" />
  </fieldset>
 </tal:tab>
</tal:fieldsets>
</div>

<metal:editLicenceMacro define-macro="editLicenceMacro" i18n:domain="urban" tal:define="useTabbing python: context.portal_urban.getUrbanConfig(context).getUseTabbingForEdit();">
   <div tal:condition="not: useTabbing">
       <metal:listing use-macro="here/urban_macros/macros/editLicenceFieldsNoTabbingMacro" />
   </div>

   <tal:with_tabbing condition="useTabbing">
       <metal:listing use-macro="here/urban_macros/macros/editLicenceFieldsWithTabbingMacro" />
   </tal:with_tabbing>
</metal:editLicenceMacro>

<metal:editLicenceFieldsWithTabbingMacro define-macro="editLicenceFieldsWithTabbingMacro"
                                         i18n:domain="urban"
                                         tal:define="putils context/plone_utils;
                                                     tabs_config context/getTabs">
<tal:fieldsets repeat="tab_config tabs_config">
 <tal:tab define="fieldset python: 'urban_%s' % tab_config['value'];
                  display_name python: tab_config['display_name']">
  <fieldset class="urbanEditWithTabbing" tal:define="fieldsetid python:putils.normalizeString(fieldset)"
          tal:attributes="id string:fieldset-${fieldsetid}">
    <legend id="#"
            tal:content="display_name"
            tal:attributes="id string:fieldsetlegend-${fieldsetid}"
            i18n:translate="" />
      <metal:listing use-macro="here/urban_macros/macros/editLicenceFieldsMacro" />
  </fieldset>
 </tal:tab>
</tal:fieldsets>
</metal:editLicenceFieldsWithTabbingMacro>

<div metal:define-macro="editLicenceFieldsMacro" i18n:domain="urban">
 <tal:fields repeat="field python:schematas[fieldset].editableFields(here, visible_only=True)">
  <tal:block define="fieldName field/getName">

   <tal:comment replace="nothing">Display a fieldset around the 'isInPca' and 'Pca' fields</tal:comment>
   <tal:pca condition="python: fieldName in ['isInPCA', 'pca',]">
    <tal:comment replace="nothing">We do the entire job manually when the field is 'isInPca' and there is nothing left to do when it is the 'Pca' field</tal:comment>
    <tal:manage_pca condition="python: fieldName == 'isInPCA'">
     <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
      <legend i18n:translate="pca_fieldset_legend">PCA</legend>
      <metal:fieldMacro use-macro="python:here.widget('isInPCA', mode='edit')" />
      <metal:fieldMacro use-macro="python:here.widget('pca', mode='edit')" />
     </fieldset>
    </tal:manage_pca>
   </tal:pca>

   <tal:comment replace="nothing">Display a fieldset around the 'isInSubdivision' and 'subdivisionDetails' fields</tal:comment>
   <tal:subdivision condition="python: fieldName in ['isInSubdivision', 'parcellings', 'subdivisionDetails',]">
    <tal:comment replace="nothing">We do the entire job manually when the field is 'isInSubdivision' and there is nothing left to do when it is the 'subdivisionDetails' field</tal:comment>
    <tal:manage_subdivision condition="python: fieldName == 'isInSubdivision'">
     <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
      <legend i18n:translate="subdivision_fieldset_legend">Subdivision</legend>
      <metal:fieldMacro use-macro="python:here.widget('isInSubdivision', mode='edit')" />
      <metal:fieldMacro use-macro="python:here.widget('parcellings', mode='edit')" />
      <metal:fieldMacro use-macro="python:here.widget('subdivisionDetails', mode='edit')" />
     </fieldset>
    </tal:manage_subdivision>
    </tal:subdivision>

   <tal:other condition="not: python: fieldName in ['isInPCA', 'pca', 'isInSubdivision', 'parcellings', 'subdivisionDetails',]">
    <metal:fieldMacro use-macro="python:here.widget(field.getName(), mode='edit')" />
   </tal:other>
 </tal:block>
 </tal:fields>
</div>

<metal:displayAddress define-macro="displayAddress">
  <tal:block condition="obj/getStreet"><br /></tal:block>
  <span tal:replace="python: obj.getStreet()+' '+obj.getNumber()" /><br />
  <span tal:replace="python: obj.getZipcode()+' '+obj.getCity()" />
</metal:displayAddress>

<metal:titleWithIcon define-macro="titleWithIcon">
 <div tal:replace="structure provider:plone.abovecontenttitle" />
 <h1 class="documentFirstHeading">
  <img src="#" tal:attributes="src string:${context/@@plone_portal_state/portal_url}/${context/portal_type}.png" />
  <span tal:replace="here/Title" tal:omit-tag="">Title</span>
 </h1>
</metal:titleWithIcon>
