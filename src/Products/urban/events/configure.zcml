<configure xmlns="http://namespaces.zope.org/zope"
           xmlns:five="http://namespaces.zope.org/five"
           xmlns:i18n="http://namespaces.zope.org/i18n"
           i18n_domain="urban">

  <subscriber for="..content.interfaces.IUrbanEventOpinionRequest
                   Products.Archetypes.event.IEditBegunEvent"
              handler=".opinionRequestEvents.setDefaultLinkedInquiry" />

  <subscriber for="..interfaces.IApplicant
                   zope.app.container.interfaces.IObjectRemovedEvent"
              handler=".applicantEvents.onDelete" />

  <subscriber for="..interfaces.IApplicant
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".applicantEvents.reindexLicenceApplicantInfos" />

  <subscriber for="..interfaces.IProprietary
                   zope.app.container.interfaces.IObjectRemovedEvent"
              handler=".applicantEvents.onDelete" />

  <subscriber for="..interfaces.IProprietary
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".applicantEvents.reindexLicenceApplicantInfos" />

  <subscriber for="..content.interfaces.IContact
                   zope.lifecycleevent.interfaces.IObjectCreatedEvent"
              handler=".contactEvents.setInterface" />

  <subscriber for="..content.interfaces.IContact
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".contactEvents.updateLicenceTitle" />

  <subscriber for="..content.interfaces.IContact
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".contactEvents.positionByAlphabeticalOrder" />

  <subscriber for="..content.interfaces.IInquiry
                   Products.Archetypes.interfaces.IEditBegunEvent"
              handler=".inquiryEvents.setDefaultValuesEvent"/>

  <subscriber for="..content.interfaces.IInquiry
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".inquiryEvents.beforeDelete" />

  <subscriber for="..content.interfaces.IInquiry
                   zope.app.container.interfaces.IObjectRemovedEvent"
              handler=".inquiryEvents.afterDelete" />

  <subscriber for="..content.interfaces.IInquiry
                   zope.lifecycleevent.interfaces.IObjectCreatedEvent"
              handler=".inquiryEvents.setGeneratedTitle" />

  <subscriber for="..interfaces.IGenericLicence
                   Products.Archetypes.interfaces.IEditBegunEvent"
              handler=".licenceEvents.setDefaultValuesEvent"/>

  <subscriber for="..interfaces.IGenericLicence
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
              handler=".licenceEvents.postCreationActions"/>

  <subscriber for="..interfaces.IGenericLicence
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".licenceEvents.updateLicenceTitle"/>

  <subscriber for="..interfaces.IGenericLicence
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".licenceEvents.updateEventsFoldermanager"/>

  <subscriber for="..content.interfaces.IPortionOut
                   zope.app.container.interfaces.IObjectRemovedEvent"
              handler=".portionOutEvents.onDelete" />

  <subscriber for="..content.interfaces.IPortionOut
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
               handler=".portionOutEvents.setValidParcel" />

  <subscriber for="..content.interfaces.IPortionOut
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
              handler=".portionOutEvents.setDivisionCode" />

  <subscriber for="..content.interfaces.IPortionOut
                   Products.Archetypes.interfaces.IObjectEditedEvent"
              handler=".portionOutEvents.setValidParcel" />

  <subscriber for="..content.interfaces.IPortionOut
                   Products.Archetypes.interfaces.IObjectEditedEvent"
              handler=".portionOutEvents.setDivisionCode" />

  <subscriber for="..content.interfaces.IPortionOut
                   zope.lifecycleevent.IObjectCreatedEvent"
              handler=".portionOutEvents.setEnvironmentLicencePreviousLicencesField" />

  <subscriber for="..content.interfaces.IPortionOut
                   zope.app.container.interfaces.IObjectRemovedEvent"
              handler=".portionOutEvents.setEnvironmentLicencePreviousLicencesField" />

  <subscriber for="..content.interfaces.IUrbanEvent
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
              handler=".urbanEventEvents.setDefaultValuesEvent"/>

  <subscriber for="..content.interfaces.IUrbanEvent
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
              handler=".urbanEventEvents.setEventTypeType"/>

  <subscriber for="..content.interfaces.IUrbanEvent
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
              handler=".urbanEventEvents.setCreationDate"/>

  <subscriber for="..content.interfaces.IUrbanEvent
                   zope.lifecycleevent.interfaces.IObjectCreatedEvent"
              handler=".urbanEventEvents.generateSingletonDocument"/>

  <subscriber for="..content.interfaces.IUrbanEvent
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".urbanEventEvents.updateKeyEvent"/>

  <subscriber for="..content.interfaces.IUrbanEvent
                   zope.lifecycleevent.interfaces.IObjectRemovedEvent"
              handler=".urbanEventEvents.updateKeyEvent" />

  <subscriber for="..content.interfaces.IUrbanEventInquiry
                   zope.lifecycleevent.interfaces.IObjectCreatedEvent"
              handler=".urbanEventInquiryEvents.setLinkedInquiry" />

  <subscriber for="..content.interfaces.IUrbanDoc
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".filesEvents.updateAllTemplatesStylesEvent" />

  <subscriber for="..cfg.interfaces.IUrbanEventType
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".urbanEventTypesEvents.updateKeyEvent" />

  <subscriber for="..cfg.interfaces.IEnvironmentRubricTerm
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".rubricTermEvents.updateTitle" />

  <subscriber for="..interfaces.IEnvironmentBase
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".environmentLicenceEvents.setExploitationConditions"/>

  <subscriber for="..cfg.interfaces.ILicenceDeliveryEvent
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".environmentLicenceEvents.createLicenceExpirationEvent"/>

  <subscriber for="..content.interfaces.IPortionOut
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".parcelEvents.updateParcellingTitle" />

  <subscriber for="..content.interfaces.IParcellingTerm
                   zope.lifecycleevent.interfaces.IObjectModifiedEvent"
              handler=".parcellingtermEvents.updateTitle" />

</configure>
